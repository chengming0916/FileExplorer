using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Data;
using QuickZip.UserControls.MVVM.ViewModel;
using QuickZip.UserControls.MVVM.Model;
using QuickZip.UserControls.MVVM;
using System.Collections;
using System.Windows.Documents;
using System.ComponentModel;
using Cinch;
using System.Windows.Media;
using System.Diagnostics;

namespace QuickZip.UserControls.MVVM
{
    /// <summary>
    /// File Listing View.
    /// </summary>
    /// <typeparam name="FI"></typeparam>
    /// <typeparam name="DI"></typeparam>
    /// <typeparam name="FSI"></typeparam>
    public class DirectoryViewerViewModel<FI, DI, FSI> : ViewerBaseViewModel<FI, DI, FSI>
        where DI : FSI
        where FI : FSI
    {
        #region Constructor
        public DirectoryViewerViewModel(Profile<FI, DI, FSI> profile,
           DirectoryModel<FI, DI, FSI> embedDirectoryModel)
            : base(profile, embedDirectoryModel)
        {
            StatusbarViewModel = new DirectoryStatusbarViewModel<FI, DI, FSI>(_profile, EmbeddedDirectoryViewModel);                        
            Reload(true);
            _subEntries = new CollectionViewSource() { Source = EmbeddedDirectoryViewModel.SubEntries };
            _subEntries.ChangeSortMethod<FI, DI, FSI>(_sortBy, _sortDirection);
            ShowDirectoryTreeDefault = true;
            CurrentBrowserMode = BrowserMode.Directory;
        }

        public DirectoryViewerViewModel(Profile<FI, DI, FSI> profile)
            : base(profile)
        {
            ShowDirectoryTreeDefault = true;
        }
        #endregion

        #region Data

        private CollectionViewSource _subEntries;
        private SortCriteria _sortBy = SortCriteria.sortByFullName;
        private ListSortDirection _sortDirection = ListSortDirection.Ascending;        

        #endregion

        #region Methods

        public void Reload(bool forceReload = true)
        {
            if (EmbeddedDirectoryViewModel != null)
                EmbeddedDirectoryViewModel.List(forceReload,
                    () =>
                    {
                        NotifyPropertyChanged("SubEntries");
                        DirectoryStatusbarViewModel.ChildViewModels = EmbeddedDirectoryViewModel.SubEntries.ToArray();
                        //StatusbarViewModel = new DirectoryStatusbarViewModel<FI, DI, FSI>(_profile, EmbeddedDirectoryViewModel,
                        //    EmbeddedDirectoryViewModel.SubEntries.ToArray());
                    });

        }

        public override void Expand()
        {
            {
                if (CanExpand)
                    lock (SelectedItems)
                    {
                        if (SelectedItems.Count == 1)
                        {

                            bool fileSelected = SelectedItems[0].EmbeddedModel is FileModel<FI, DI, FSI>;

                            OpenMode mode =
                                SelectedItems[0].EmbeddedModel is DirectoryModel<FI, DI, FSI> ?
                                DirectoryOpenMode : fileSelected ?
                                FileOpenMode : OpenMode.None; ;

                            switch (mode)
                            {
                                case OpenMode.OpenInner:
                                    DirectoryChanged(this, new DirectoryChangedEventArgs<FI, DI, FSI>(
                                        SelectedItems[0].EmbeddedModel));

                                    CurrentBrowserMode = BrowserMode.File;
                                    MediaFile = _pro SelectedItems[0].EmbeddedModel.EmbeddedEntry


                                    break;
                                case OpenMode.OpenOuter:
                                    SelectedItems[0].EmbeddedModel.Open();
                                    break;
                            }
                        }
                    }
            }
        }

        public override void Refresh()
        {
            Reload(true);
        }

        public override void OnUnload()
        {
            if (EmbeddedDirectoryViewModel != null)
                EmbeddedDirectoryViewModel.OnUnload();
        }

        protected override void OnSelectionChanged()
        {
            base.OnSelectionChanged();
            DirectoryStatusbarViewModel.SelectedViewModels = SelectedItems.ToArray();
                
                //new DirectoryStatusbarViewModel<FI, DI, FSI>(
                //_profile, EmbeddedDirectoryViewModel,
                //EmbeddedDirectoryViewModel.SubEntries.ToArray(),
                //SelectedItems.ToArray());
        }

        protected override void OnDispose()
        {
            base.OnDispose();
            NotifyPropertyChanged("EmbeddedDirectoryViewModel");
        }

        public override string ToString()
        {
            if (EmbeddedDirectoryViewModel == null)
                return "DirectoryViewerVM;Null";
            else
                return "DirectoryViewerVM;" + EmbeddedDirectoryViewModel.ToString();
        }

        protected override string getLabel()
        {
            if (EmbeddedEntryViewModel != null)
                return EmbeddedEntryViewModel.EmbeddedModel.Label;

            return "";
        }

        protected override string getToolTip()
        {
            if (EmbeddedEntryViewModel != null)
                return EmbeddedEntryViewModel.EmbeddedModel.ParseName;
            else return "";
        }

        protected override ImageSource getSmallIcon()
        {
            return EmbeddedDirectoryViewModel.SmallIcon.Item1.Value;
        }

        protected override void unselectAll()
        {
            if (EmbeddedDirectoryViewModel != null)
                foreach (EntryViewModel<FI, DI, FSI> vm in EmbeddedDirectoryViewModel.SubEntries)
                    vm.IsSelected = false;
        }

        #endregion

        #region Public Properties

        public DirectoryStatusbarViewModel<FI, DI, FSI> DirectoryStatusbarViewModel { get { return StatusbarViewModel as DirectoryStatusbarViewModel<FI, DI, FSI>; } }

        public CollectionViewSource SubEntries { get { return _subEntries; } }

        #region SortBy, SortDirection
        static PropertyChangedEventArgs sortByChangeArgs =
         ObservableHelper.CreateArgs<DirectoryViewerViewModel<FI, DI, FSI>>(x => x.SortBy);

        public SortCriteria SortBy
        {
            get { return _sortBy; }
            set
            {
                _subEntries.ChangeSortMethod<FI, DI, FSI>(value, _sortDirection);
                _sortBy = value;
                NotifyPropertyChanged(sortByChangeArgs);
            }
        }

        static PropertyChangedEventArgs sortDirectionChangeArgs =
          ObservableHelper.CreateArgs<DirectoryViewerViewModel<FI, DI, FSI>>(x => x.SortDirection);

        public ListSortDirection SortDirection
        {
            get { return _sortDirection; }
            set
            {
                _subEntries.ChangeSortMethod<FI, DI, FSI>(_sortBy, value);
                _sortDirection = value;
                NotifyPropertyChanged(sortDirectionChangeArgs);
            }
        }
        #endregion

        public DirectoryViewModel<FI, DI, FSI> EmbeddedDirectoryViewModel
        {
            get { return (DirectoryViewModel<FI, DI, FSI>)EmbeddedEntryViewModel; }
        }
       

        #endregion
    }
}
